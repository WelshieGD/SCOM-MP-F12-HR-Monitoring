<ManagementPackFragment SchemaVersion="2.0" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
	<!-- 
%%
Description:
  A Service Monitor targetted at an existing 
  CompanyID - is a short abbreviation for your company with NO SPACES OR SPECIAL CHARACTERS ALLOWED
  AppName - is a short name for your app with NO SPACES OR SPECIAL CHARACTERS ALLOWED
  ServiceName - Name of service to monitor with NO SPACES OR SPECIAL CHARACTERS ALLOWED (this should be unique for the Management Pack)
  Target - Class to target service monitor at
  
	
Version: 1.0
LastModified: 19-April-2023

%%

In this fragment you need to replace:
  ##CompanyID## F12
  ##AppName## HR
  ##ServiceName## Spooler
  ##Target## F12.HR.ApplicationServer.Class

This fragment depends on references:
  RequiredReference: Alias="System", ID="System.Library"
  RequiredReference: Alias="Windows", ID="Microsoft.Windows.Library"
	
@@Author=Graham Davies@@

Based on the work of Kevin Holman - Fragment Library

add code

-->

	<TypeDefinitions>
		<MonitorTypes>
			<UnitMonitorType ID="F12.Type.UnitMonitor.Service.BusinessHours" Accessibility="Public">
				<MonitorTypeStates>
					<MonitorTypeState ID="Running" NoDetection="false" />
					<MonitorTypeState ID="NotRunning" NoDetection="false" />
				</MonitorTypeStates>
				<Configuration>
					<xsd:element minOccurs="1" name="ComputerName" type="xsd:string" />
					<xsd:element minOccurs="1" name="ServiceName" type="xsd:string" />
					<xsd:element minOccurs="0" maxOccurs="1" name="CheckStartupType" type="xsd:string" />
					<xsd:element minOccurs="1" name="StartTime" type="xsd:string" />
					<xsd:element minOccurs="1" name="EndTime" type="xsd:string" />
					<xsd:element minOccurs="1" name="DaysOfWeekMask" type="xsd:integer" />
				</Configuration>
				<OverrideableParameters>
					<OverrideableParameter ID="CheckStartupType" Selector="$Config/CheckStartupType$" ParameterType="string" />
					<OverrideableParameter ID="StartTime" Selector="$Config/StartTime$" ParameterType="string" />
					<OverrideableParameter ID="EndTime" Selector="$Config/EndTime$" ParameterType="string" />
					<OverrideableParameter ID="DaysOfWeekMask" Selector="$Config/DaysOfWeekMask$" ParameterType="string" />
				</OverrideableParameters>
				<MonitorImplementation>
					<MemberModules>
						<DataSource ID="DS" TypeID="Windows!Microsoft.Windows.Win32ServiceInformationProvider">
							<ComputerName>$Config/ComputerName$</ComputerName>
							<ServiceName>$Config/ServiceName$</ServiceName>
							<Frequency>60</Frequency>
							<CheckStartupType>$Config/CheckStartupType$</CheckStartupType>
						</DataSource>
						<ProbeAction ID="Probe" TypeID="Windows!Microsoft.Windows.Win32ServiceInformationProbe">
							<ComputerName>$Config/ComputerName$</ComputerName>
							<ServiceName>$Config/ServiceName$</ServiceName>
						</ProbeAction>
						<ConditionDetection ID="ServiceRunning" TypeID="System!System.ExpressionFilter">
							<Expression>
								<Or>
									<Expression>
										<And>
											<Expression>
												<SimpleExpression>
													<ValueExpression>
														<Value Type="String">$Config/CheckStartupType$</Value>
													</ValueExpression>
													<Operator>NotEqual</Operator>
													<ValueExpression>
														<Value Type="String">false</Value>
													</ValueExpression>
												</SimpleExpression>
											</Expression>
											<Expression>
												<SimpleExpression>
													<ValueExpression>
														<XPathQuery Type="Integer">Property[@Name='StartMode']</XPathQuery>
													</ValueExpression>
													<Operator>NotEqual</Operator>
													<ValueExpression>
														<Value Type="Integer">2</Value>
													</ValueExpression>
												</SimpleExpression>
											</Expression>
										</And>
									</Expression>
									<Expression>
										<SimpleExpression>
											<ValueExpression>
												<XPathQuery Type="Integer">Property[@Name='State']</XPathQuery>
											</ValueExpression>
											<Operator>Equal</Operator>
											<ValueExpression>
												<Value Type="Integer">4</Value>
											</ValueExpression>
										</SimpleExpression>
									</Expression>
								</Or>
							</Expression>
						</ConditionDetection>
						<ConditionDetection ID="ServiceNotRunning" TypeID="System!System.ExpressionFilter">
							<Expression>
								<And>
									<Expression>
										<Or>
											<Expression>
												<SimpleExpression>
													<ValueExpression>
														<XPathQuery Type="Integer">Property[@Name='StartMode']</XPathQuery>
													</ValueExpression>
													<Operator>Equal</Operator>
													<ValueExpression>
														<Value Type="Integer">2</Value>
													</ValueExpression>
												</SimpleExpression>
											</Expression>
											<Expression>
												<And>
													<Expression>
														<SimpleExpression>
															<ValueExpression>
																<Value Type="String">$Config/CheckStartupType$</Value>
															</ValueExpression>
															<Operator>Equal</Operator>
															<ValueExpression>
																<Value Type="String">false</Value>
															</ValueExpression>
														</SimpleExpression>
													</Expression>
													<Expression>
														<SimpleExpression>
															<ValueExpression>
																<XPathQuery Type="Integer">Property[@Name='StartMode']</XPathQuery>
															</ValueExpression>
															<Operator>NotEqual</Operator>
															<ValueExpression>
																<Value Type="Integer">2</Value>
															</ValueExpression>
														</SimpleExpression>
													</Expression>
												</And>
											</Expression>
										</Or>
									</Expression>
									<Expression>
										<SimpleExpression>
											<ValueExpression>
												<XPathQuery Type="Integer">Property[@Name='State']</XPathQuery>
											</ValueExpression>
											<Operator>NotEqual</Operator>
											<ValueExpression>
												<Value Type="Integer">4</Value>
											</ValueExpression>
										</SimpleExpression>
									</Expression>
								</And>
							</Expression>
						</ConditionDetection>
						<ConditionDetection ID="ScheduleFilter" TypeID="System!System.SchedulerFilter">
							<SchedulerFilter>
								<ProcessDataMode>OnSchedule</ProcessDataMode>
								<Schedule>
									<WeeklySchedule>
										<Windows>
											<Daily>
												<Start>$Config/StartTime$</Start>
												<End>$Config/EndTime$</End>
												<DaysOfWeekMask>$Config/DaysOfWeekMask$</DaysOfWeekMask>
											</Daily>
										</Windows>
									</WeeklySchedule>
									<ExcludeDates />
								</Schedule>
								<UseCurrentTime>true</UseCurrentTime>
							</SchedulerFilter>
						</ConditionDetection>
					</MemberModules>
					<RegularDetections>
						<RegularDetection MonitorTypeStateID="Running">
							<Node ID="ServiceRunning">
								<Node ID="DS" />
							</Node>
						</RegularDetection>
						<RegularDetection MonitorTypeStateID="NotRunning">
							<Node ID="ServiceNotRunning">
								<Node ID="ScheduleFilter">
									<Node ID="DS" />
								</Node>
							</Node>
						</RegularDetection>
					</RegularDetections>
					<OnDemandDetections>
						<OnDemandDetection MonitorTypeStateID="Running">
							<Node ID="ServiceRunning">
								<Node ID="Probe" />
							</Node>
						</OnDemandDetection>
						<OnDemandDetection MonitorTypeStateID="NotRunning">
							<Node ID="ServiceNotRunning">
								<Node ID="Probe" />
							</Node>
						</OnDemandDetection>
					</OnDemandDetections>
				</MonitorImplementation>
			</UnitMonitorType>
		</MonitorTypes>
	</TypeDefinitions>
	<Monitoring>
		<Monitors>
			<UnitMonitor ID="F12.HR.BusinessHours.Monitor.Spooler" Accessibility="Internal" Enabled="true" Target="F12.HR.ApplicationServer.Class" ParentMonitorID="Health!System.Health.AvailabilityState" Remotable="true" Priority="Normal" TypeID="F12.Type.UnitMonitor.Service.BusinessHours" ConfirmDelivery="true">
				<Category>Custom</Category>
				<AlertSettings AlertMessage="F12.HR.BusinessHours.Monitor.Spooler_AlertMessageResourceID">
					<AlertOnState>Error</AlertOnState>
					<AutoResolve>true</AutoResolve>
					<AlertPriority>Normal</AlertPriority>
					<AlertSeverity>Error</AlertSeverity>
				</AlertSettings>
				<OperationalStates>
					<OperationalState ID="UIGeneratedOpStateIdd94291d08baa443c9d7595bf2399f85f" MonitorTypeStateID="Running" HealthState="Success" />
					<OperationalState ID="UIGeneratedOpStateId770300848c2f491ebb9d14a03e00dedd" MonitorTypeStateID="NotRunning" HealthState="Error" />
				</OperationalStates>
				<Configuration>
					<ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/PrincipalName$</ComputerName>
					<ServiceName>Spooler</ServiceName>
					<StartTime>08:00</StartTime>
					<EndTime>17:00</EndTime>
					<DaysOfWeekMask>62</DaysOfWeekMask>
				</Configuration>
			</UnitMonitor>
		</Monitors>
	</Monitoring>
	<Presentation>
		<StringResources>
			<StringResource ID="F12.HR.BusinessHours.Monitor.Spooler_AlertMessageResourceID" />
		</StringResources>
	</Presentation>
	<LanguagePacks>
		<LanguagePack ID="ENU" IsDefault="true">
			<DisplayStrings>
				<DisplayString ElementID="F12.Type.UnitMonitor.Service.BusinessHours">
					<Name>Spooler Windows Service Monitor </Name>
				</DisplayString>
				<DisplayString ElementID="F12.HR.BusinessHours.Monitor.Spooler">
					<Name>Spooler Windows Service Monitor </Name>
				</DisplayString>
				<DisplayString ElementID="F12.HR.BusinessHours.Monitor.Spooler" SubElementID="UIGeneratedOpStateId770300848c2f491ebb9d14a03e00dedd">
					<Name>NotRunning</Name>
				</DisplayString>
				<DisplayString ElementID="F12.HR.BusinessHours.Monitor.Spooler" SubElementID="UIGeneratedOpStateIdd94291d08baa443c9d7595bf2399f85f">
					<Name>Running</Name>
				</DisplayString>
				<DisplayString ElementID="F12.HR.BusinessHours.Monitor.Spooler_AlertMessageResourceID">
					<Name>Spooler Windows Service Monitor is not running.</Name>
					<Description>The Spooler Service is not running on {0}.</Description>
				</DisplayString>
			</DisplayStrings>
			<KnowledgeArticles>
				<KnowledgeArticle ElementID="F12.HR.BusinessHours.Monitor.Spooler">
					<MamlContent>
						<section xmlns="http://schemas.microsoft.com/maml/2004/10">
							<title>Start Time</title>
							<para>
								This is when the monitoring for the service being down to start.
							</para>
						</section>
						<section xmlns="http://schemas.microsoft.com/maml/2004/10">
							<title>End Time</title>
							<para>
								This is when the monitoring for the service being down to stop.
							</para>
						</section>
						<section xmlns="http://schemas.microsoft.com/maml/2004/10">
							<title>Monitoring Logic</title>
							<para>
								The monitor will run 24x7. However, it will only alert on service down between the configured Start \ End time  for the specified day mask. If the monitor is unhealthy at the stop time (service is stopped) then the monitor will go green if the service is started outside of business hours. This allows for teams working outside of business hours to verify that any fixes they apply (start service) have actually worked.
							</para>
						</section>
					</MamlContent>
				</KnowledgeArticle>
			</KnowledgeArticles>
		</LanguagePack>
	</LanguagePacks>

</ManagementPackFragment>
